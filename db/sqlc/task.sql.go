// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task.sql

package db

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO task (description)
VALUES ($1)
RETURNING id, description, status, created_at, updated_at, deleted_at
`

func (q *Queries) CreateTask(ctx context.Context, description string) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, description)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM task
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTaskForUpdate = `-- name: GetTaskForUpdate :one
SELECT id, description, status, created_at, updated_at, deleted_at FROM task
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetTaskForUpdate(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskForUpdate, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, description, status, created_at, updated_at, deleted_at FROM task
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTasksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksByStatus = `-- name: ListTasksByStatus :many
SELECT id, description, status, created_at, updated_at, deleted_at FROM task
WHERE status = $3
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTasksByStatusParams struct {
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
	Status Status `json:"status"`
}

func (q *Queries) ListTasksByStatus(ctx context.Context, arg ListTasksByStatusParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasksByStatus, arg.Limit, arg.Offset, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskDescription = `-- name: UpdateTaskDescription :one
UPDATE task
SET description = $2
WHERE id = $1
RETURNING id, description, status, created_at, updated_at, deleted_at
`

type UpdateTaskDescriptionParams struct {
	ID          int32  `json:"id"`
	Description string `json:"description"`
}

func (q *Queries) UpdateTaskDescription(ctx context.Context, arg UpdateTaskDescriptionParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskDescription, arg.ID, arg.Description)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :one
UPDATE task
SET status = $2
WHERE id = $1
RETURNING id, description, status, created_at, updated_at, deleted_at
`

type UpdateTaskStatusParams struct {
	ID     int32  `json:"id"`
	Status Status `json:"status"`
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskStatus, arg.ID, arg.Status)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
